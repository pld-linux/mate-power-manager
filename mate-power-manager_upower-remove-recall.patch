diff -upr mate-power-manager-orig/data/org.mate.power-manager.gschema.xml.in mate-power-manager-test/data/org.mate.power-manager.gschema.xml.in
--- mate-power-manager-orig/data/org.mate.power-manager.gschema.xml.in	2013-10-21 11:01:49.245340000 +0200
+++ mate-power-manager-test/data/org.mate.power-manager.gschema.xml.in	2013-11-09 01:00:37.801114147 +0100
@@ -211,11 +211,6 @@
       <_summary>Seconds of inactivity to spin down when on battery</_summary>
       <_description>The number of seconds of inactivity to spin down the disks when on battery power.</_description>
     </key>
-    <key name="notify-perhaps-recall" type="b">
-      <default>true</default>
-      <_summary>If we should show the recalled battery warning for a broken battery</_summary>
-      <_description>If we should show the recalled battery warning for a broken battery. Set this to false only if you know your battery is okay.</_description>
-    </key>
     <key name="notify-low-capacity" type="b">
       <default>true</default>
       <_summary>If we should show the low capacity warning for a broken battery</_summary>
diff -upr mate-power-manager-orig/src/gpm-engine.c mate-power-manager-test/src/gpm-engine.c
--- mate-power-manager-orig/src/gpm-engine.c	2013-11-08 22:45:52.333993000 +0100
+++ mate-power-manager-test/src/gpm-engine.c	2013-11-08 23:06:27.444397476 +0100
@@ -760,6 +760,7 @@ gpm_engine_device_add (GpmEngine *engine
 	}
 }
 
+#if !UP_CHECK_VERSION(0, 99, 0)
 /**
  * gpm_engine_check_recall:
  **/
@@ -795,7 +796,7 @@ out:
 	g_free (recall_url);
 	return recall_notice;
 }
-
+#endif
 /**
  * gpm_engine_coldplug_idle_cb:
  **/
@@ -831,7 +832,9 @@ gpm_engine_coldplug_idle_cb (GpmEngine *
 	for (i=0;i<array->len;i++) {
 		device = g_ptr_array_index (array, i);
 		gpm_engine_device_add (engine, device);
+#if !UP_CHECK_VERSION(0, 99, 0)
 		gpm_engine_check_recall (engine, device);
+#endif
 	}
 #if !UP_CHECK_VERSION(0, 99, 0)
 out:
@@ -850,7 +853,9 @@ gpm_engine_device_added_cb (UpClient *cl
 {
 	/* add to list */
 	g_ptr_array_add (engine->priv->array, g_object_ref (device));
+#if !UP_CHECK_VERSION(0, 99, 0)
 	gpm_engine_check_recall (engine, device);
+#endif
 
 	gpm_engine_recalculate_state (engine);
 }
@@ -1154,6 +1159,7 @@ gpm_engine_class_init (GpmEngineClass *k
 			      G_STRUCT_OFFSET (GpmEngineClass, low_capacity),
 			      NULL, NULL, g_cclosure_marshal_VOID__POINTER,
 			      G_TYPE_NONE, 1, G_TYPE_POINTER);
+#if !UP_CHECK_VERSION(0, 99, 0)
 	signals [PERHAPS_RECALL] =
 		g_signal_new ("perhaps-recall",
 			      G_TYPE_FROM_CLASS (object_class),
@@ -1162,6 +1168,7 @@ gpm_engine_class_init (GpmEngineClass *k
 			      NULL, NULL, gpm_marshal_VOID__POINTER_STRING_STRING,
 			      G_TYPE_NONE,
 			      3, G_TYPE_POINTER, G_TYPE_STRING, G_TYPE_STRING);
+#endif
 	signals [FULLY_CHARGED] =
 		g_signal_new ("fully-charged",
 			      G_TYPE_FROM_CLASS (object_class),
diff -upr mate-power-manager-orig/src/gpm-engine.h mate-power-manager-test/src/gpm-engine.h
--- mate-power-manager-orig/src/gpm-engine.h	2013-10-14 22:33:51.547439000 +0200
+++ mate-power-manager-test/src/gpm-engine.h	2013-11-08 22:59:05.547961683 +0100
@@ -49,10 +49,12 @@ typedef struct
 						 gchar		*icon);
 	void		(* summary_changed)	(GpmEngine	*engine,
 						 gchar		*status);
+#if !UP_CHECK_VERSION(0, 99, 0)
 	void		(* perhaps_recall)	(GpmEngine	*engine,
 						 UpDevice	*device,
 						 const gchar	*oem_vendor,
 						 const gchar	*website);
+#endif
 	void		(* low_capacity)	(GpmEngine	*engine,
 						 UpDevice	*device);
 	void		(* charge_low)		(GpmEngine	*engine,
diff -upr mate-power-manager-orig/src/gpm-manager.c mate-power-manager-test/src/gpm-manager.c
--- mate-power-manager-orig/src/gpm-manager.c	2013-10-14 22:33:51.549439000 +0200
+++ mate-power-manager-test/src/gpm-manager.c	2013-11-08 23:02:10.741820700 +0100
@@ -1090,6 +1090,7 @@ gpm_manager_settings_changed_cb (GSettin
 		gpm_manager_sync_policy_sleep (manager);
 }
 
+#if !UP_CHECK_VERSION(0, 99, 0)
 /**
  * gpm_manager_perhaps_recall_response_cb:
  */
@@ -1194,6 +1195,7 @@ gpm_manager_engine_perhaps_recall_cb (Gp
 	/* delay by a few seconds so the panel can load */
 	g_timeout_add_seconds (GPM_MANAGER_RECALL_DELAY, (GSourceFunc) gpm_manager_perhaps_recall_delay_cb, manager);
 }
+#endif
 
 /**
  * gpm_manager_engine_icon_changed_cb:
@@ -2020,8 +2022,10 @@ gpm_manager_init (GpmManager *manager)
 	gpm_manager_sync_policy_sleep (manager);
 
 	manager->priv->engine = gpm_engine_new ();
+#if !UP_CHECK_VERSION(0, 99, 0)
 	g_signal_connect (manager->priv->engine, "perhaps-recall",
 			  G_CALLBACK (gpm_manager_engine_perhaps_recall_cb), manager);
+#endif
 	g_signal_connect (manager->priv->engine, "low-capacity",
 			  G_CALLBACK (gpm_manager_engine_low_capacity_cb), manager);
 	g_signal_connect (manager->priv->engine, "icon-changed",
